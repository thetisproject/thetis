diff --git a/thetis/coupled_timeintegrator_2d.py b/thetis/coupled_timeintegrator_2d.py
index 93af2a96..21dc25ac 100755
--- a/thetis/coupled_timeintegrator_2d.py
+++ b/thetis/coupled_timeintegrator_2d.py
@@ -35,7 +35,8 @@ class CoupledTimeIntegrator2D(timeintegrator.TimeIntegratorBase):
         self.fields = solver.fields
         self.timesteppers = AttrDict()
         print_output('Coupled time integrator: {:}'.format(self.__class__.__name__))
-        print_output('  Shallow Water time integrator: {:}'.format(self.swe_integrator.__name__))
+        if not self.options.tracer_only:
+            print_output('  Shallow Water time integrator: {:}'.format(self.swe_integrator.__name__))
         if self.options.solve_tracer:
             print_output('  Tracer time integrator: {:}'.format(self.tracer_integrator.__name__))
         if self.options.sediment_model_options.solve_suspended_sediment:
@@ -50,7 +51,8 @@ class CoupledTimeIntegrator2D(timeintegrator.TimeIntegratorBase):
         """
         Creates all time integrators with the correct arguments
         """
-        self.timesteppers.swe2d = self.solver.get_swe_timestepper(self.swe_integrator)
+        if not self.options.tracer_only:
+            self.timesteppers.swe2d = self.solver.get_swe_timestepper(self.swe_integrator)
         if self.solver.options.solve_tracer:
             for label in self.options.tracer_metadata:
                 self.timesteppers[label] = self.solver.get_tracer_timestepper(self.tracer_integrator, label)
@@ -79,7 +81,8 @@ class CoupledTimeIntegrator2D(timeintegrator.TimeIntegratorBase):
         # compatible with the 2d coupled timeintegrator
         assert solution2d == self.fields.solution_2d
 
-        self.timesteppers.swe2d.initialize(self.fields.solution_2d)
+        if not self.options.tracer_only:
+            self.timesteppers.swe2d.initialize(self.fields.solution_2d)
         if self.options.solve_tracer:
             for label in self.options.tracer_metadata:
                 self.timesteppers[label].initialize(self.fields[label])
@@ -120,7 +123,8 @@ class CoupledMatchingTimeIntegrator2D(CoupledTimeIntegrator2D):
         :arg integrator: the time integrator to be used
             for all equations
         """
-        self.swe_integrator = integrator
+        if not self.options.tracer_only:
+            self.swe_integrator = integrator
         if solver.options.solve_tracer:
             self.tracer_integrator = integrator
         if solver.options.sediment_model_options.solve_suspended_sediment:
@@ -218,3 +222,24 @@ class NonHydrostaticTimeIntegrator2D(CoupledTimeIntegrator2D):
                         self.fields.elev_2d.assign(self.elev_old)
                         self.timesteppers.fs2d.advance(t, update_forcings=update_forcings)
                         self.elev_old.assign(self.fields.elev_2d)
+
+
+class CoupledPicardTimeIntegrator2D(CoupledTimeIntegrator2D):
+    # TODO: doc
+    def __init__(self, solver, integrator):
+        self.tracer_integrator = integrator
+        if (not self.options.solve_tracer or not self.options.tracer_only
+                or self.solver.options.sediment_model_options.solve_suspended_sediment
+                or self.sediment_integrator):
+            raise NotImplementedError("Only tracer equations are currently supported.")  # TODO
+        super(CoupledPicardTimeIntegrator2D, self).__init__(solver)
+        self.iterations = 1  # TODO: Make this selectable
+
+    def advance(self, t, update_forcings=None):
+        for it in range(self.iterations):
+            final_it = it == self.iterations - 1
+            if self.options.solve_tracer:
+                for label in self.options.tracer_metadata:
+                    self.timesteppers[label].advance(t, update_forcings=update_forcings, update_lagged=final_it)
+                    if self.options.use_limiter_for_tracers:
+                        self.solver.tracer_limiter.apply(self.fields[label])
